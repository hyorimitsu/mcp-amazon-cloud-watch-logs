name: Push New Tag

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  push-new-tag:
    name: Push New Tag
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_PAT }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get current package.json version
        id: current-version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Get previous package.json version
        id: prev-version
        run: |
          # Get the current version for comparison
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"

          # Initialize previous version as empty
          PREV_VERSION=""

          # Get list of commits that modified package.json
          COMMITS=$(git log --pretty=format:"%H" -- package.json)

          # Skip the first commit (current HEAD)
          SKIP_FIRST=true

          # Loop through commits to find the last one that had a different version
          for COMMIT in $COMMITS; do
            # Skip the first commit (current HEAD)
            if [ "$SKIP_FIRST" = true ]; then
              SKIP_FIRST=false
              continue
            fi

            # Get version from this commit
            COMMIT_VERSION=$(git show $COMMIT:package.json | jq -r '.version' 2>/dev/null)

            # Store the commit's version and check if it differs from the current version
            if [ ! -z "$COMMIT_VERSION" ]; then
              PREV_VERSION=$COMMIT_VERSION
              if [ "$COMMIT_VERSION" != "$CURRENT_VERSION" ]; then
                echo "Found different previous version $PREV_VERSION in commit $COMMIT"
                break
              else
                echo "Found same version $PREV_VERSION in commit $COMMIT, continuing search for different version"
              fi
            fi
          done

          # Output the previous version
          echo "version=$PREV_VERSION" >> $GITHUB_OUTPUT
          echo "Previous version: $PREV_VERSION"

      - name: Validate version format
        id: validate-version
        if: steps.prev-version.outputs.version != steps.current-version.outputs.version
        run: |
          VERSION=${{ steps.current-version.outputs.version }}
          if npx semver "$VERSION" &>/dev/null; then
            echo "Version $VERSION is valid (MAJOR.MINOR.PATCH format)"
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "Error: Version $VERSION does not follow MAJOR.MINOR.PATCH format"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Compare versions
        id: compare-versions
        if: steps.prev-version.outputs.version != steps.current-version.outputs.version && steps.validate-version.outputs.valid == 'true'
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          PREV_VERSION="${{ steps.prev-version.outputs.version }}"

          if [ -z "$PREV_VERSION" ]; then
            echo "No previous version found, treating as new version"
            echo "changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          COMPARISON=$(npx semver -r ">$PREV_VERSION" $CURRENT_VERSION)
          if [ "$COMPARISON" == "$CURRENT_VERSION" ]; then
            echo "Version increased from $PREV_VERSION to $CURRENT_VERSION"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version not increased: $PREV_VERSION to $CURRENT_VERSION"
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Check if tag already exists
        id: check-tag
        if: steps.prev-version.outputs.version != steps.current-version.outputs.version && steps.validate-version.outputs.valid == 'true' && steps.compare-versions.outputs.changed == 'true'
        run: |
          VERSION=${{ steps.current-version.outputs.version }}
          git fetch --tags
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists, skipping tag creation"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag if version changed
        if: steps.prev-version.outputs.version != steps.current-version.outputs.version && steps.validate-version.outputs.valid == 'true' && steps.compare-versions.outputs.changed == 'true' && steps.check-tag.outputs.exists != 'true'
        run: |
          VERSION=${{ steps.current-version.outputs.version }}
          echo "Version changed from ${{ steps.prev-version.outputs.version }} to $VERSION"

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

          echo "Successfully created and pushed tag v$VERSION"
